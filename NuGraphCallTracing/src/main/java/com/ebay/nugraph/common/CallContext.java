package com.ebay.nugraph.common;

import org.slf4j.Logger;

/**
 * Common request context used by NuGraph Service and NuGraph Storage Plugin, to allow the request context propagated
 * from NuGraph Service to NuGraph Storage Plugin.
 *
 */
public class CallContext {
    /**
     * The operation name that is remotely invoked. It can be traverse, read or write or update.
     */
    private final String operationName;

    /**
     * The keyspace name that is remotely accessed.
     */
    private final String keyspaceName;


    /**
     * The client side specified deadline for the whole end-to-end invocation, in nano seconds.
     */
    private final long clientDeadline;


    /**
     * The target time for this request to be serviced in before the client will cancel this transaction, in nano seconds
     */
    private final long targetResponseTime;


    /**
     * The request id propagated from the client all the way down to the storage plugin
     */
    private final String requestId;

    /**
     * The request id generated by Tinkerpop
     */
    private final String gremlinRequestId;

    /**
     * The application id passed from the client.
     */
    private final String applicationId;


    /**
     * The client IP address provided
     */
    private final String clientAddress;

    /**
     * The client version
     */
    private final String clientVersion;

    /**
     * The request time stamp issued from the client, in milliseconds
     */
    private final long requestTimeStamp;

    /**
     * audit logger object
     */
    private final Logger auditLogger;

    /**
     * Query logger object
     */
    private final Logger queryLogger;

    /**
     * Graph traversal
     */
    private final String graphTraversal;


    public enum ReadMode { READ_SNAPSHOT, READ_COMMITTED, NOT_SPECIFIED }

    /**
     * Read mode
     */
    private final ReadMode readMode;

    private final long maxTraversalTimeoutMs;

    /**
     *
     * @param operationName operation name
     * @param keyspaceName keyspace name
     * @param clientDeadline client specified deadline time
     * @param targetResponseTime target response time specified in nano seconds
     * @param requestId the request identifier
     * @param applicationId the application identifier
     * @param clientAddress the client's IP address
     * @param requestTimeStamp the time stamp on the client request
     */
    public CallContext (final String operationName, final String keyspaceName, final long clientDeadline,
                        final long targetResponseTime, final String requestId, final String applicationId,
                        final String clientAddress, final String clientVersion, final long requestTimeStamp,
                        final String gremlinRequestId, final String graphTraversal, final Logger auditLogger,
                        final Logger queryLogger, final boolean isReadOnly) {
        this.operationName = operationName;
        this.keyspaceName = keyspaceName;
        this.clientDeadline = clientDeadline;
        this.targetResponseTime = targetResponseTime;
        this.requestId = requestId;
        this.applicationId = applicationId;
        this.clientVersion = clientVersion;
        this.clientAddress = clientAddress;
        this.requestTimeStamp = requestTimeStamp;
        this.gremlinRequestId = gremlinRequestId;
        this.graphTraversal = graphTraversal;
        this.auditLogger = auditLogger;
        this.queryLogger = queryLogger;

        // For backward compatibility, if isReadOnly flag is set, read mode is set to READ_SNAPSHOT
        this.readMode = isReadOnly ? ReadMode.READ_SNAPSHOT : ReadMode.NOT_SPECIFIED;

        // With read mode is READ_SNAPSHOT, graph traversal timeout is limited by FDB 5-sec limit, so
        // this parameter will not be used
        this.maxTraversalTimeoutMs = 0;
    }

    public CallContext (final String operationName, final String keyspaceName, final long clientDeadline,
                        final long targetResponseTime, final String requestId, final String applicationId,
                        final String clientAddress, final String clientVersion, final long requestTimeStamp,
                        final String gremlinRequestId, final String graphTraversal, final Logger auditLogger,
                        final Logger queryLogger, final ReadMode readMode, final long maxTraversalTimeoutMs) {
        this.operationName = operationName;
        this.keyspaceName = keyspaceName;
        this.clientDeadline = clientDeadline;
        this.targetResponseTime = targetResponseTime;
        this.requestId = requestId;
        this.applicationId = applicationId;
        this.clientAddress = clientAddress;
        this.clientVersion = clientVersion;
        this.requestTimeStamp = requestTimeStamp;
        this.gremlinRequestId = gremlinRequestId;
        this.graphTraversal = graphTraversal;
        this.auditLogger = auditLogger;
        this.queryLogger = queryLogger;
        this.maxTraversalTimeoutMs = maxTraversalTimeoutMs;
        this.readMode = readMode;
    }


    public String  getOperationName() {
        return operationName;
    }

    public String getKeyspaceName() {
        return this.keyspaceName;
    }

    public long getClientDeadline() {
        return this.clientDeadline;
    }

    public long getTargetResponseTime() {
        return this.targetResponseTime;
    }

    public String getRequestId() {
        return this.requestId;
    }

    public String getApplicationId() {
        return this.applicationId;
    }

    public String getClientAddress() {
        return this.clientAddress;
    }

    public String getClientVersion() { return this.clientVersion; }

    public long getRequestTimeStamp() {
        return this.requestTimeStamp;
    }

    public String getGremlinRequestId() {
        return this.gremlinRequestId;
    }

    public boolean isReadOnly() {
        return (this.readMode != ReadMode.NOT_SPECIFIED);
    }

    public ReadMode getReadMode() {
        return readMode;
    }

    public long getMaxTraversalTimeoutMs() {
        return maxTraversalTimeoutMs;
    }

    public Logger getAuditLogger() { return auditLogger; }

    public Logger getQueryLogger() { return queryLogger; }

    public String getGraphTraversal() { return graphTraversal; }
}
